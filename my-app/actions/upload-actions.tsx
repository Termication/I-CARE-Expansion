'use server';

import { extractTextFromPdf } from "@/lib/langchain";
import type { ClientUploadedFileData } from "uploadthing/types";
import { generateFromOpenAI } from "@/lib/openai";
import { generateSummaryFromDeekseek } from "@/lib/deepseek";

export async function generatePdfSummary(uploadResponse: ClientUploadedFileData<{
  userId: string;
  fileUrl: string;
  fileName: string;
}>[]) {
  if (!uploadResponse || uploadResponse.length === 0) {
    return {
      success: false,
      message: "No upload response provided.",
      data: null,
    };
  }

  const { serverData: { userId, fileUrl, fileName } } = uploadResponse[0];

  if (!fileUrl) {
    return {
      success: false,
      message: "No PDF URL provided.",
      data: null,
    };
  }

  try {
    const pdfText = await extractTextFromPdf(fileUrl);

    try {
      const summary = await generateFromOpenAI(pdfText);
      return {
        success: true,
        message: "Summary generated by OpenAI.",
        data: summary,
      };
    } catch (error: any) {
      if (error.message?.includes("Rate limit") || error.message?.includes("quota")) {
        try {
          const fallbackSummary = await generateSummaryFromDeekseek(pdfText); // âœ… now DeepSeek
          return {
            success: true,
            message: "Summary generated by DeepSeek (fallback).",
            data: fallbackSummary,
          };
        } catch (deepseekError: any) {
          return {
            success: false,
            message: "Both OpenAI and DeepSeek APIs are currently over quota.",
            data: null,
          };
        }
      }

      return {
        success: false,
        message: `OpenAI error: ${error.message}`,
        data: null,
      };
    }
  } catch (err: any) {
    console.error("PDF extraction error:", err);
    return {
      success: false,
      message: "Error extracting text from PDF.",
      data: null,
    };
  }
}

